const SUPABASE_URL = "https://ctriaqbaxxqrsmovzoqs.supabase.co";
const SUPABASE_BUCKET = "media";

let data = [];
let reveal = false;
let learnedIndicesList = JSON.parse(sessionStorage.getItem("learnedIndicesList") || "[]");
let currentIndex = null;
let currentPosition = -1; // V·ªã tr√≠ hi·ªán t·∫°i trong danh s√°ch learnedIndicesList

async function loadData() {
    try {
        console.log("ƒêang t·∫£i output_deck.json...");
        const res = await fetch("output_deck.json");
        if (!res.ok) throw new Error(`Kh√¥ng th·ªÉ t·∫£i JSON: ${res.status}`);
        data = await res.json();
        if (!Array.isArray(data) || data.length === 0) {
            throw new Error("D·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng");
        }
        console.log("D·ªØ li·ªáu JSON ƒë√£ t·∫£i:", data.length, "t·ª´");

        // Kh·ªüi t·∫°o ti·∫øn tr√¨nh
        document.getElementById("totalCards").innerText = data.length;

        // N·∫øu kh√¥ng c√≥ t·ª´ ƒë√£ h·ªçc, hi·ªÉn th·ªã t·ª´ ƒë·∫ßu ti√™n
        if (learnedIndicesList.length === 0) {
            showCard();
        } else {
            // Hi·ªÉn th·ªã t·ª´ cu·ªëi c√πng trong danh s√°ch ƒë√£ h·ªçc
            currentPosition = learnedIndicesList.length - 1;
            currentIndex = learnedIndicesList[currentPosition];
            showCard(false); // Kh√¥ng th√™m v√†o danh s√°ch
        }
    } catch (e) {
        console.error("L·ªói t·∫£i d·ªØ li·ªáu:", e);
        document.body.innerHTML = "‚ùå Kh√¥ng th·ªÉ t·∫£i file JSON. Vui l√≤ng ki·ªÉm tra console.";
    }
}

function supabaseMediaURL(filename) {
    return `${SUPABASE_URL}/storage/v1/object/public/${SUPABASE_BUCKET}/${filename}`;
}

function getRandomUnseenIndex() {
    if (learnedIndicesList.length >= data.length) {
        console.log("ƒê√£ h·ªçc h·∫øt t·ª´, reset danh s√°ch...");
        alert("üéâ B·∫°n ƒë√£ h·ªçc h·∫øt flashcards trong phi√™n n√†y!");
        learnedIndicesList = [];
        currentPosition = -1;
        sessionStorage.setItem("learnedIndicesList", JSON.stringify(learnedIndicesList));
    }

    let index;
    do {
        index = Math.floor(Math.random() * data.length);
    } while (learnedIndicesList.includes(index));

    console.log("Ch·ªçn t·ª´ m·ªõi v·ªõi index:", index);
    return index;
}

async function preloadImage(url) {
    try {
        console.log("ƒêang t·∫£i h√¨nh ·∫£nh:", url);
        const img = new Image();
        img.src = url;
        await new Promise((resolve, reject) => {
            img.onload = () => {
                console.log("H√¨nh ·∫£nh t·∫£i th√†nh c√¥ng");
                resolve();
            };
            img.onerror = () => reject(new Error("Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh"));
        });
    } catch (e) {
        console.error("L·ªói t·∫£i h√¨nh ·∫£nh:", e);
        document.getElementById("cardImage").alt = "H√¨nh ·∫£nh kh√¥ng kh·∫£ d·ª•ng";
    }
}

async function showCard(addToList = true) {
    reveal = false;
    const backButton = document.querySelector('button[onclick="handleBack()"]');

    // Ch·ªçn t·ª´ m·ªõi ho·∫∑c t·ª´ hi·ªán t·∫°i
    if (addToList) {
        currentIndex = getRandomUnseenIndex();
        learnedIndicesList.push(currentIndex);
        currentPosition = learnedIndicesList.length - 1;
        sessionStorage.setItem("learnedIndicesList", JSON.stringify(learnedIndicesList));
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t Back
    if (backButton) {
        backButton.disabled = currentPosition <= 0;
    } else {
        console.warn("Kh√¥ng t√¨m th·∫•y n√∫t Back");
    }

    const card = data[currentIndex];
    console.log("Hi·ªÉn th·ªã t·ª´:", card.word);

    // Fade out
    const cardElement = document.getElementById("card");
    const fullDataElement = document.getElementById("fullData");
    cardElement.style.opacity = "0";
    fullDataElement.style.opacity = "0";

    // C·∫≠p nh·∫≠t n·ªôi dung
    document.getElementById("hintDisplay").innerHTML = card.spelling_hint;
    document.getElementById("defDisplay").innerHTML = card.definition.replace(/{{c1::(.*?)}}/g, "[...]");
    document.getElementById("hintInput").value = "";
    document.getElementById("fullData").classList.add("hidden");

    document.getElementById("audioWordSource").src = supabaseMediaURL(card.audio_word);
    document.getElementById("audioMeaningSource").src = supabaseMediaURL(card.audio_meaning);
    document.getElementById("audioExampleSource").src = supabaseMediaURL(card.audio_example);

    document.getElementById("audioWord").load();
    document.getElementById("audioMeaning").load();
    document.getElementById("audioExample").load();

    await preloadImage(supabaseMediaURL(card.image));
    document.getElementById("cardImage").src = supabaseMediaURL(card.image);

    // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
    document.getElementById("currentCard").innerText = currentPosition + 1;

    // Fade in
    cardElement.style.opacity = "1";
    fullDataElement.style.opacity = "1";
}

function revealCard() {
    const card = data[currentIndex];
    console.log("Reveal t·ª´:", card.word);
    document.getElementById("word").innerText = card.word;
    document.getElementById("phonetic").innerText = card.phonetic;
    document.getElementById("translation").innerHTML = card.translation;
    document.getElementById("fullDefinition").innerHTML = card.html_full_meaning;
    document.getElementById("defDisplay").innerHTML = card.definition.replace(/{{c1::(.*?)}}/g, "$1");
    document.getElementById("fullData").classList.remove("hidden");

    document.getElementById("audioWord").play().catch((e) => console.warn("L·ªói ph√°t audio:", e));
}

function handleReveal() {
    if (!reveal) {
        reveal = true;
        revealCard();
    }
}

function handleNext() {
    if (reveal) {
        console.log("Chuy·ªÉn sang t·ª´ ti·∫øp theo...");
        document.getElementById("card").style.opacity = "0";
        setTimeout(() => {
            showCard().then(() => {
                document.getElementById("card").style.opacity = "1";
            });
        }, 300);
    } else {
        console.log("Ch∆∞a reveal, kh√¥ng th·ªÉ chuy·ªÉn ti·∫øp");
    }
}

function handleBack() {
    if (currentPosition > 0) {
        console.log("Quay l·∫°i t·ª´ tr∆∞·ªõc ƒë√≥...");
        currentPosition--;
        currentIndex = learnedIndicesList[currentPosition];
        document.getElementById("card").style.opacity = "0";
        setTimeout(() => {
            showCard(false).then(() => {
                document.getElementById("card").style.opacity = "1";
            });
        }, 300);
    } else {
        console.log("Kh√¥ng c√≥ t·ª´ tr∆∞·ªõc ƒë√≥ ƒë·ªÉ quay l·∫°i");
    }
}

document.addEventListener("DOMContentLoaded", () => {
    const hintInput = document.getElementById("hintInput");
    const backButton = document.querySelector('button[onclick="handleBack()"]');

    if (!hintInput) {
        console.error("Kh√¥ng t√¨m th·∫•y hintInput");
        return;
    }
    if (!backButton) {
        console.warn("Kh√¥ng t√¨m th·∫•y n√∫t Back");
    } else {
        backButton.disabled = true; // Ban ƒë·∫ßu v√¥ hi·ªáu h√≥a n√∫t Back
    }

    // X·ª≠ l√Ω Enter trong √¥ nh·∫≠p: Reveal / Next
    hintInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
            const userInput = hintInput.value.trim().toLowerCase();
            const correctWord = data[currentIndex]?.word.toLowerCase();
            if (!reveal) {
                // Cho ph√©p reveal d√π nh·∫≠p ƒë√∫ng hay sai
                if (userInput && userInput !== correctWord) {
                    console.log("Nh·∫≠p sai t·ª´:", userInput);
                    hintInput.classList.add("error");
                    setTimeout(() => hintInput.classList.remove("error"), 500);
                } else {
                    console.log("Nh·∫≠p ƒë√∫ng t·ª´ ho·∫∑c ƒë·ªÉ tr·ªëng:", userInput);
                }
                reveal = true;
                revealCard();
            } else {
                handleNext();
            }
        }
    });

    // Global Enter/Space/ArrowLeft: n·∫øu ch∆∞a focus v√†o √¥ nh·∫≠p th√¨ x·ª≠ l√Ω
    document.addEventListener("keydown", (e) => {
        if (document.activeElement !== hintInput) {
            if (e.key === "Enter") {
                e.preventDefault();
                handleNext();
                // Ch·ªâ focus tr√™n desktop, tr√°nh tr√™n mobile
                if (!/Mobi|Android/i.test(navigator.userAgent)) {
                    hintInput.focus();
                }
            } else if (e.key === " ") {
                e.preventDefault();
                handleReveal();
            } else if (e.key === "ArrowLeft") {
                e.preventDefault();
                handleBack();
            }
        }
    });

    loadData();
});